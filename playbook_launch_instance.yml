---
- name: Launch AWS Instance
  hosts: local
  connection: local
  gather_facts: False

  vars_files:
    - "environments/{{ env }}/main.yml" # ENV must always be loaded first
    - "environments/shared_secrets.yml"
    - "environments/shared_variables.yml"

  #Note: Define the on_demand variable as true to request on-demand instances
  #Default launch behaviour: spot instances
  vars:
    on_demand: false

  tasks:
    - name: Fetch on-demand pricing
      shell: >-
        aws pricing get-products --service-code AmazonEC2 --region us-east-2
        --filters "Type=TERM_MATCH,Field=usageType,Value=boxUsage:{{ COMPUTE_INSTANCE_TYPE }}" "Type=TERM_MATCH,Field=location,Value=US East (Ohio)" "Type=TERM_MATCH,Field=operatingSystem,Value=Linux" "Type=TERM_MATCH,Field=preInstalledSw,Value=NA"
        | jq -rc '.PriceList[]' | jq -r '.terms.OnDemand[].priceDimensions[].pricePerUnit.USD'
      environment:
        AWS_ACCESS_KEY_ID: "{{ AWS_ACCESS_KEY }}"
        AWS_SECRET_ACCESS_KEY: "{{ AWS_SECRET_KEY }}"
      register: ec2_instance_price
      when: not on_demand
    - name: Launch instances
      ec2:
        key_name: AGR-ssl2
        keypair: AGR-ssl2
        group: ["default", "SSH", "Everyone", "HTTP/HTTPS"]
        instance_type: "{{ COMPUTE_INSTANCE_TYPE }}"
        spot_price: "{{ on_demand | ternary(omit, ec2_instance_price.stdout) }}"
        spot_type: "{{ on_demand | ternary(omit, 'one-time') }}"
        spot_wait_timeout: "{{ on_demand | ternary(omit, 300) }}"
        image: ami-0af8a4497a35daeab
        region: us-east-2
        vpc_subnet_id: subnet-3d788c54
        assign_public_ip: yes
        instance_profile_name: S3DataAccess
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        volumes:
          - device_name: /dev/xvda
            volume_type: io1
            volume_size: 1000
            iops: 3000
            delete_on_termination: yes
        wait: yes
        user_data: "" # Otherwise get weird error on start up
        instance_tags:
          # Termination is filtered by Name tag, take care if modifying.
          # Please change filter value in playbook_terminate_instance.yml if changed here.
          Name: "Ansible Generated - {{ NET }}-dev Server"
          dns_name: "{{ NET }}"
      register: ec2

    - name: Add all instance public IPs to host group
      add_host:
        hostname: "{{ item.public_ip }}"
        groupname: launched
      with_items: "{{ ec2.instances }}"
      register: launched

    - name: Update hosts file with IP address
      replace:
        path: /usr/src/ansible/hosts
        regexp: '\[remote\]\n[^\n\[\]]*'
        replace: "[remote]\n{{ item.public_ip }}"
      with_items: "{{ ec2.instances }}"

    - name: Retrieve all volumes for a queried instance
      ec2_vol:
        instance: '{{ item }}'
        region: us-east-2
        state: list
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
      with_items: "{{ ec2.instance_ids }}"
      register: ec2_volumes

    - name: Ensure all volumes are tagged
      ec2_tag:
        region: us-east-2
        resource: '{{ item.1.id }}'
        aws_access_key: "{{ AWS_ACCESS_KEY }}"
        aws_secret_key: "{{ AWS_SECRET_KEY }}"
        tags:
          Name: "Ansible Generated Volume - {{ PLAYBOOK_NAME }}"
      with_subelements:
        - "{{ ec2_volumes.results }}"
        - volumes

    - include_tasks: tasks/check_ssh.yml
